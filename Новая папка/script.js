// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let cart = [];
let currentOrder = null;
let userData = {};
let orders = [];
let referrals = [];

// –ö–ª—é—á –¥–ª—è –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞ (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å)
const ADMIN_PASSWORD = 'admin123';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
    Telegram.WebApp.ready();
    Telegram.WebApp.expand();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const tgUser = Telegram.WebApp.initDataUnsafe.user;
    if (tgUser) {
        userData = {
            userId: tgUser.id,
            firstName: tgUser.first_name,
            username: tgUser.username
        };
    }
} else {
    // –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞ - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userData = {
        userId: Math.floor(Math.random() * 1000000),
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        username: 'test_user'
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
function initApp() {
    loadOrders();
    loadReferrals();
    loadProducts();
    handleReferral();
}

// –¢–æ–≤–∞—Ä—ã
const products = [
    {
        id: 'shaft',
        name: 'üî© –®–∞—Ö—Ç–∞ –¥–ª—è –∫–∞–ª—å—è–Ω–∞',
        price: 2000,
        colors: ['‚ö´Ô∏è –ß–µ—Ä–Ω—ã–π', 'üî¥ –ö—Ä–∞—Å–Ω—ã–π', 'üü¢ –ó–µ–ª–µ–Ω—ã–π', 'üîµ –°–∏–Ω–∏–π', '‚ö™Ô∏è –°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π'],
        description: '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è —à–∞—Ö—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∑–∞—â–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π',
        specs: {
            size: '24—Å–º √ó 6,5—Å–º',
            material: '–ú–µ—Ç–∞–ª–ª',
            features: ['–ó–∞—â–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞', '–õ–µ–≥–∫–∞—è —á–∏—Å—Ç–∫–∞', '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã']
        }
    },
    {
        id: 'bowl',
        name: 'üîÆ –ö–æ–ª–±–∞ –¥–ª—è –∫–∞–ª—å—è–Ω–∞',
        price: 1000,
        description: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –∫–æ–ª–±–∞ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        specs: {
            material: '–°—Ç–µ–∫–ª–æ',
            features: ['–°–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º —à–∞—Ö—Ç', '–õ–µ–≥–∫–æ —á–∏—Å—Ç–∏—Ç—Å—è', '–£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è']
        }
    }
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
function confirmAge() {
    localStorage.setItem('ageConfirmed', 'true');
    document.getElementById('ageWarning').classList.add('hidden');
    document.getElementById('mainScreen').classList.remove('hidden');
    initApp();
}

function rejectAge() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.showAlert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ª–∏—Ü –º–ª–∞–¥—à–µ 18 –ª–µ—Ç');
        Telegram.WebApp.close();
    } else {
        alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ª–∏—Ü –º–ª–∞–¥—à–µ 18 –ª–µ—Ç');
        document.body.innerHTML = '<div class="age-warning"><h2>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2></div>';
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (localStorage.getItem('ageConfirmed') === 'true') {
    document.getElementById('ageWarning').classList.add('hidden');
    document.getElementById('mainScreen').classList.remove('hidden');
    initApp();
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function showScreen(screenName) {
    document.querySelectorAll('.screen-content').forEach(screen => {
        screen.classList.add('hidden');
    });
    document.getElementById(screenName).classList.remove('hidden');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
    if (screenName === 'orders') {
        loadUserOrders();
    } else if (screenName === 'admin') {
        showAdminPanel();
    } else if (screenName === 'referral') {
        loadReferralInfo();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
function loadProducts() {
    const productsList = document.getElementById('productsList');
    productsList.innerHTML = '';
    
    products.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        
        let colorsHTML = '';
        if (product.colors) {
            colorsHTML = `
                <div class="color-selector">
                    <strong>–¶–≤–µ—Ç:</strong><br>
                    ${product.colors.map((color, index) => 
                        `<span class="color-option ${index === 0 ? 'selected' : ''}" 
                              onclick="selectColor(this, '${product.id}')">${color}</span>`
                    ).join('')}
                </div>
            `;
        }
        
        productCard.innerHTML = `
            <h3>${product.name}</h3>
            <p>${product.description}</p>
            ${product.specs ? `
                <div class="specs">
                    <strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong>
                    <ul>
                        ${product.specs.features ? product.specs.features.map(feature => `<li>${feature}</li>`).join('') : ''}
                    </ul>
                </div>
            ` : ''}
            ${colorsHTML}
            <div class="product-price">${product.price}‚ÇΩ</div>
            <div class="product-actions">
                <button class="btn-secondary" onclick="addToCart('${product.id}')">
                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                </button>
            </div>
        `;
        
        productsList.appendChild(productCard);
    });
}

function selectColor(element, productId) {
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    element.parentElement.querySelectorAll('.color-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    element.classList.add('selected');
}

// –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
function addToCart(productId) {
    const product = products.find(p => p.id === productId);
    const existingItem = cart.find(item => item.id === productId);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    let selectedColor = null;
    const colorElement = document.querySelector(`[onclick*="selectColor"][onclick*="${productId}"].selected`);
    if (colorElement) {
        selectedColor = colorElement.textContent;
    }
    
    if (existingItem) {
        existingItem.quantity++;
        if (selectedColor) existingItem.selectedColor = selectedColor;
    } else {
        cart.push({
            ...product,
            quantity: 1,
            selectedColor: selectedColor
        });
    }
    
    updateCart();
    showScreen('cart');
    showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');
}

function removeFromCart(productId) {
    cart = cart.filter(item => item.id !== productId);
    updateCart();
    showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
}

function updateCartQuantity(productId, change) {
    const item = cart.find(item => item.id === productId);
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            removeFromCart(productId);
        } else {
            updateCart();
        }
    }
}

function updateCart() {
    const cartItems = document.getElementById('cartItems');
    const totalPrice = document.getElementById('totalPrice');
    
    cartItems.innerHTML = '';
    let total = 0;
    
    cart.forEach(item => {
        const itemTotal = item.price * item.quantity;
        total += itemTotal;
        
        const cartItem = document.createElement('div');
        cartItem.className = 'product-card';
        cartItem.innerHTML = `
            <h4>${item.name}</h4>
            ${item.selectedColor ? `<p><strong>–¶–≤–µ—Ç:</strong> ${item.selectedColor}</p>` : ''}
            <div class="product-actions">
                <div class="quantity-controls">
                    <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', -1)">-</button>
                    <span>${item.quantity} —à—Ç.</span>
                    <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', 1)">+</button>
                </div>
                <div class="product-price">${itemTotal}‚ÇΩ</div>
                <button class="btn-secondary" onclick="removeFromCart('${item.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        
        cartItems.appendChild(cartItem);
    });
    
    totalPrice.textContent = total;
    
    if (cart.length === 0) {
        cartItems.innerHTML = '<p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>';
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    localStorage.setItem('cart', JSON.stringify(cart));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage
function loadCart() {
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
        cart = JSON.parse(savedCart);
        updateCart();
    }
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function checkout() {
    if (cart.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
        return;
    }
    
    showScreen('checkout');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
document.getElementById('orderForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const orderData = {
        name: formData.get('name'),
        telegram: formData.get('telegram'),
        phone: formData.get('phone'),
        address: formData.get('address'),
        cart: [...cart], // –∫–æ–ø–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
        total: cart.reduce((sum, item) => sum + (item.price * item.quantity), 0),
        userId: userData.userId,
        userFirstName: userData.firstName,
        username: userData.username
    };
    
    createOrder(orderData);
});

function createOrder(orderData) {
    const orderId = 'ORD' + Date.now();
    const prepayment = Math.ceil(orderData.total * 0.5); // 50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
    
    const order = {
        id: orderId,
        ...orderData,
        prepayment: prepayment,
        status: 'new',
        date: new Date().toLocaleDateString('ru-RU'),
        timestamp: Date.now()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    saveOrder(order);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    showPaymentDetails(orderId, prepayment);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –û–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É.');
}

function showPaymentDetails(orderId, amount) {
    document.getElementById('orderId').textContent = orderId;
    document.getElementById('paymentAmount').textContent = amount;
    showScreen('payment');
}

function confirmPayment() {
    if (currentOrder) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        updateOrderStatus(currentOrder.id, 'paid');
    }
    
    showNotification('–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ Telegram.');
    
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart = [];
    updateCart();
    localStorage.removeItem('cart');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    showScreen('catalog');
}

// –°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤
function saveOrder(order) {
    orders.push(order);
    localStorage.setItem('orders', JSON.stringify(orders));
    currentOrder = order;
}

function loadOrders() {
    const savedOrders = localStorage.getItem('orders');
    if (savedOrders) {
        orders = JSON.parse(savedOrders);
    }
}

function loadUserOrders() {
    const ordersList = document.getElementById('ordersList');
    ordersList.innerHTML = '';
    
    const userOrders = orders.filter(order => order.userId === userData.userId);
    
    if (userOrders.length === 0) {
        ordersList.innerHTML = '<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>';
        return;
    }
    
    userOrders.sort((a, b) => b.timestamp - a.timestamp).forEach(order => {
        const orderCard = document.createElement('div');
        orderCard.className = `order-card ${order.status}`;
        orderCard.innerHTML = `
            <h4>–ó–∞–∫–∞–∑ #${order.id}</h4>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${getStatusText(order.status)}</p>
            <p><strong>–°—É–º–º–∞:</strong> ${order.total}‚ÇΩ</p>
            <p><strong>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</strong> ${order.prepayment}‚ÇΩ</p>
            <p><strong>–î–∞—Ç–∞:</strong> ${order.date}</p>
            <p><strong>–ê–¥—Ä–µ—Å:</strong> ${order.address}</p>
            <p><strong>Telegram:</strong> ${order.telegram}</p>
            <div class="order-items">
                <strong>–¢–æ–≤–∞—Ä—ã:</strong>
                ${order.cart.map(item => `
                    <div>${item.name} - ${item.quantity}—à—Ç. - ${item.price * item.quantity}‚ÇΩ</div>
                `).join('')}
            </div>
        `;
        ordersList.appendChild(orderCard);
    });
}

function getStatusText(status) {
    const statuses = {
        'new': 'üÜï –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'paid': 'üí≥ –û–ø–ª–∞—á–µ–Ω',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    };
    return statuses[status] || status;
}

function updateOrderStatus(orderId, status) {
    const order = orders.find(o => o.id === orderId);
    if (order) {
        order.status = status;
        localStorage.setItem('orders', JSON.stringify(orders));
    }
}

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
function loadReferralInfo() {
    const userId = userData.userId;
    if (userId) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        const webAppUrl = `https://minishishaa.netlify.app/?ref=${userId}`;
        
        document.getElementById('referralLink').textContent = webAppUrl;
        document.getElementById('referralLink').href = webAppUrl;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateReferralStats();
    }
}

function copyReferralLink() {
    const link = document.getElementById('referralLink').textContent;
    navigator.clipboard.writeText(link).then(() => {
        showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –î–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!');
    }).catch(err => {
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏');
    });
}

function handleReferral() {
    const urlParams = new URLSearchParams(window.location.search);
    const refParam = urlParams.get('ref');
    
    if (refParam && refParam !== userData.userId.toString()) {
        const referrerId = refParam;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        localStorage.setItem('referrer', referrerId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        saveReferral(referrerId, userData.userId);
        
        showNotification('üéâ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!');
    }
}

function saveReferral(referrerId, referredId) {
    const referral = {
        id: Date.now(),
        referrerId: parseInt(referrerId),
        referredId: referredId,
        date: new Date().toLocaleDateString('ru-RU'),
        bonusApplied: false
    };
    
    referrals.push(referral);
    localStorage.setItem('referrals', JSON.stringify(referrals));
}

function loadReferrals() {
    const savedReferrals = localStorage.getItem('referrals');
    if (savedReferrals) {
        referrals = JSON.parse(savedReferrals);
    }
}

function updateReferralStats() {
    const userReferrals = referrals.filter(ref => ref.referrerId === userData.userId);
    document.getElementById('referralCount').textContent = userReferrals.length;
    
    // –°–∫–∏–¥–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const discount = Math.min(10 + userReferrals.length * 5, 50); // –º–∞–∫—Å 50%
    document.getElementById('discountPercent').textContent = discount + '%';
}

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
function showAdminPanel() {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
    const password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    if (password !== ADMIN_PASSWORD) {
        showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        showScreen('catalog');
        return;
    }
    
    loadAdminOrders();
    updateAdminStats();
}

function loadAdminOrders() {
    const adminOrdersList = document.getElementById('adminOrdersList');
    adminOrdersList.innerHTML = '';
    
    if (orders.length === 0) {
        adminOrdersList.innerHTML = '<p>–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç</p>';
        return;
    }
    
    orders.sort((a, b) => b.timestamp - a.timestamp).forEach(order => {
        const orderCard = document.createElement('div');
        orderCard.className = `order-card ${order.status}`;
        orderCard.innerHTML = `
            <h4>–ó–∞–∫–∞–∑ #${order.id} <span class="status-badge status-${order.status}">${getStatusText(order.status)}</span></h4>
            <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${order.name} (${order.telegram})</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${order.phone}</p>
            <p><strong>–ê–¥—Ä–µ—Å:</strong> ${order.address}</p>
            <p><strong>–°—É–º–º–∞:</strong> ${order.total}‚ÇΩ (–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: ${order.prepayment}‚ÇΩ)</p>
            <p><strong>–î–∞—Ç–∞:</strong> ${order.date}</p>
            <div class="order-items">
                <strong>–¢–æ–≤–∞—Ä—ã:</strong>
                ${order.cart.map(item => `
                    <div>${item.name} - ${item.quantity}—à—Ç. - ${item.price * item.quantity}‚ÇΩ</div>
                `).join('')}
            </div>
            <div class="admin-actions">
                <button class="btn-secondary" onclick="updateOrderStatus('${order.id}', 'paid')">–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º</button>
                <button class="btn-secondary" onclick="updateOrderStatus('${order.id}', 'completed')">–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
                <button class="btn-danger" onclick="updateOrderStatus('${order.id}', 'cancelled')">–û—Ç–º–µ–Ω–∏—Ç—å</button>
            </div>
        `;
        adminOrdersList.appendChild(orderCard);
    });
}

function updateAdminStats() {
    const totalOrders = orders.length;
    const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0);
    
    document.getElementById('totalOrders').textContent = totalOrders;
    document.getElementById('totalRevenue').textContent = totalRevenue;
}

function exportOrders() {
    const dataStr = JSON.stringify(orders, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `orders_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    showNotification('–ó–∞–∫–∞–∑—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
}

function clearAllData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ (–∑–∞–∫–∞–∑—ã, —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ä–∑–∏–Ω—ã).')) {
        localStorage.clear();
        orders = [];
        referrals = [];
        cart = [];
        showNotification('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        loadAdminOrders();
        updateAdminStats();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showNotification(message) {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.showAlert(message);
    } else {
        alert(message);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    loadCart();
    document.getElementById('orders').addEventListener('click', loadUserOrders);
});

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
showScreen('catalog');